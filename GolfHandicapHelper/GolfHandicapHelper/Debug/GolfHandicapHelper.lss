
GolfHandicapHelper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000082a  0000089e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e36  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009db  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000748  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a4  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b3  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  9e:	0c 94 13 04 	jmp	0x826	; 0x826 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initSystem>:
	Initiates sytem
*/
/* ------------------------------------------------------------------------- */
void initSystem(void)
{
	DDRD = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  aa:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <initSystem+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <initSystem+0x10>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <send_it>:
	Performs the actions needed to send data 
*/
/* ------------------------------------------------------------------------- */
void send_it(void) 
{
	ENABLE;
  ba:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	86 ea       	ldi	r24, 0xA6	; 166
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <send_it+0x4>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <send_it+0xa>
	_delay_us(500);
	DISABLE;
  c4:	2a 98       	cbi	0x05, 2	; 5
  c6:	86 ea       	ldi	r24, 0xA6	; 166
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <send_it+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <send_it+0x14>
  ce:	08 95       	ret

000000d0 <set_cursorLcd>:
	b = column
*/
/* ------------------------------------------------------------------------- */
void set_cursorLcd(int a, int b) 
{
	RS_INSTR;
  d0:	29 98       	cbi	0x05, 1	; 5
	if (a==1){
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	29 f4       	brne	.+10     	; 0xe2 <set_cursorLcd+0x12>
		PORTD = 0x80 + b;
  d8:	60 58       	subi	r22, 0x80	; 128
  da:	6b b9       	out	0x0b, r22	; 11
		send_it();
  dc:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
  e0:	08 95       	ret
	}
	else if (a==2){
  e2:	02 97       	sbiw	r24, 0x02	; 2
  e4:	21 f4       	brne	.+8      	; 0xee <set_cursorLcd+0x1e>
		PORTD = 0xC0 + b;
  e6:	60 54       	subi	r22, 0x40	; 64
  e8:	6b b9       	out	0x0b, r22	; 11
		send_it();
  ea:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
  ee:	08 95       	ret

000000f0 <printLcdChar>:
/*
	Prints the characters given from input to function
*/
/* ------------------------------------------------------------------------- */
void printLcdChar(char *input, int cursor) 
{
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	7c 01       	movw	r14, r24
  fe:	cb 01       	movw	r24, r22
	RS_SIGN;	
 100:	29 9a       	sbi	0x05, 1	; 5
	int a = strlen(input); 
 102:	f7 01       	movw	r30, r14
 104:	01 90       	ld	r0, Z+
 106:	00 20       	and	r0, r0
 108:	e9 f7       	brne	.-6      	; 0x104 <printLcdChar+0x14>
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	8f 01       	movw	r16, r30
 10e:	0e 19       	sub	r16, r14
 110:	1f 09       	sbc	r17, r15
	set_cursorLcd(cursor, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 68 00 	call	0xd0	; 0xd0 <set_cursorLcd>
	for (int ix = 0; ix < a; ix++){
 11a:	10 16       	cp	r1, r16
 11c:	11 06       	cpc	r1, r17
 11e:	54 f4       	brge	.+20     	; 0x134 <printLcdChar+0x44>
 120:	e7 01       	movw	r28, r14
 122:	0e 0d       	add	r16, r14
 124:	1f 1d       	adc	r17, r15
		PORTD = input[ix];
 126:	99 91       	ld	r25, Y+
 128:	9b b9       	out	0x0b, r25	; 11
		send_it();
 12a:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
void printLcdChar(char *input, int cursor) 
{
	RS_SIGN;	
	int a = strlen(input); 
	set_cursorLcd(cursor, 0);
	for (int ix = 0; ix < a; ix++){
 12e:	c0 17       	cp	r28, r16
 130:	d1 07       	cpc	r29, r17
 132:	c9 f7       	brne	.-14     	; 0x126 <printLcdChar+0x36>
		PORTD = input[ix];
		send_it();
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	08 95       	ret

00000142 <printLcdInt>:
	Prints the integers given from input to function. 
	First puts the integer in char string, then send.
*/
/* ------------------------------------------------------------------------- */
void printLcdInt(int input, int cursor) 
{
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <printLcdInt+0x12>
 154:	00 d0       	rcall	.+0      	; 0x156 <printLcdInt+0x14>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	6b 01       	movw	r12, r22
	RS_SIGN;	
 15c:	29 9a       	sbi	0x05, 1	; 5
	char CharBuffer[4];
	sprintf(CharBuffer, "%d", input);
 15e:	9f 93       	push	r25
 160:	8f 93       	push	r24
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	9f 93       	push	r25
 168:	8f 93       	push	r24
 16a:	8e 01       	movw	r16, r28
 16c:	0f 5f       	subi	r16, 0xFF	; 255
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	1f 93       	push	r17
 172:	0f 93       	push	r16
 174:	0e 94 29 01 	call	0x252	; 0x252 <sprintf>
	int a = strlen(CharBuffer); 
 178:	f8 01       	movw	r30, r16
 17a:	01 90       	ld	r0, Z+
 17c:	00 20       	and	r0, r0
 17e:	e9 f7       	brne	.-6      	; 0x17a <printLcdInt+0x38>
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	7f 01       	movw	r14, r30
 184:	e0 1a       	sub	r14, r16
 186:	f1 0a       	sbc	r15, r17
	set_cursorLcd(cursor, 0);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	c6 01       	movw	r24, r12
 18e:	0e 94 68 00 	call	0xd0	; 0xd0 <set_cursorLcd>
	for (int ix = 0; ix < a; ix++){
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	1e 14       	cp	r1, r14
 1a0:	1f 04       	cpc	r1, r15
 1a2:	5c f4       	brge	.+22     	; 0x1ba <printLcdInt+0x78>
 1a4:	e0 0e       	add	r14, r16
 1a6:	f1 1e       	adc	r15, r17
		PORTD = CharBuffer[ix];
 1a8:	f8 01       	movw	r30, r16
 1aa:	81 91       	ld	r24, Z+
 1ac:	8f 01       	movw	r16, r30
 1ae:	8b b9       	out	0x0b, r24	; 11
		send_it();
 1b0:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
	RS_SIGN;	
	char CharBuffer[4];
	sprintf(CharBuffer, "%d", input);
	int a = strlen(CharBuffer); 
	set_cursorLcd(cursor, 0);
	for (int ix = 0; ix < a; ix++){
 1b4:	0e 15       	cp	r16, r14
 1b6:	1f 05       	cpc	r17, r15
 1b8:	b9 f7       	brne	.-18     	; 0x1a8 <printLcdInt+0x66>
		PORTD = CharBuffer[ix];
		send_it();
	}
}
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	08 95       	ret

000001d4 <clearLcd>:
	Clears screen
*/
/* ------------------------------------------------------------------------- */
void clearLcd(void) 
{
	RS_INSTR;
 1d4:	29 98       	cbi	0x05, 1	; 5
	//Clear screen
	PORTD = 0x01;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8b b9       	out	0x0b, r24	; 11
	send_it();
 1da:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
 1de:	08 95       	ret

000001e0 <initLcd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	83 ed       	ldi	r24, 0xD3	; 211
 1e2:	90 e3       	ldi	r25, 0x30	; 48
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <initLcd+0x4>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <initLcd+0xa>
 1ea:	00 00       	nop
*/
/* ------------------------------------------------------------------------- */
void initLcd(void) 
{
	_delay_ms(50);
	RS_INSTR;
 1ec:	29 98       	cbi	0x05, 1	; 5
	DISABLE;
 1ee:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	96 ea       	ldi	r25, 0xA6	; 166
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <initLcd+0x12>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <initLcd+0x18>
	_delay_us(500);
	// Set 2 rows
	PORTD = 0b00111100;
 1f8:	8c e3       	ldi	r24, 0x3C	; 60
 1fa:	8b b9       	out	0x0b, r24	; 11
	send_it();
 1fc:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
	// Turn on screen
	PORTD = 0x0C;
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	8b b9       	out	0x0b, r24	; 11
	send_it();
 204:	0e 94 5d 00 	call	0xba	; 0xba <send_it>
	//Clear screen
	clearLcd();
 208:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <clearLcd>
	set_cursorLcd(1,1);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 68 00 	call	0xd0	; 0xd0 <set_cursorLcd>
 218:	08 95       	ret

0000021a <main>:
}


int main(void)
{
	initSystem();
 21a:	0e 94 53 00 	call	0xa6	; 0xa6 <initSystem>
	initLcd();
 21e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <initLcd>
	
	while (1) {
		printLcdInt(1234, 1);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	82 ed       	ldi	r24, 0xD2	; 210
 228:	94 e0       	ldi	r25, 0x04	; 4
 22a:	0e 94 a1 00 	call	0x142	; 0x142 <printLcdInt>
		printLcdChar("Filip", 2);
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 78 00 	call	0xf0	; 0xf0 <printLcdChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	2f e3       	ldi	r18, 0x3F	; 63
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x26>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x30>
 24a:	00 00       	nop
		_delay_ms(5000);
		clearLcd();
 24c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <clearLcd>
 250:	e8 cf       	rjmp	.-48     	; 0x222 <main+0x8>

00000252 <sprintf>:
 252:	ae e0       	ldi	r26, 0x0E	; 14
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	ef e2       	ldi	r30, 0x2F	; 47
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__prologue_saves__+0x1c>
 25e:	0d 89       	ldd	r16, Y+21	; 0x15
 260:	1e 89       	ldd	r17, Y+22	; 0x16
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	8c 83       	std	Y+4, r24	; 0x04
 266:	1a 83       	std	Y+2, r17	; 0x02
 268:	09 83       	std	Y+1, r16	; 0x01
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	9f e7       	ldi	r25, 0x7F	; 127
 26e:	9e 83       	std	Y+6, r25	; 0x06
 270:	8d 83       	std	Y+5, r24	; 0x05
 272:	ae 01       	movw	r20, r28
 274:	47 5e       	subi	r20, 0xE7	; 231
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	6f 89       	ldd	r22, Y+23	; 0x17
 27a:	78 8d       	ldd	r23, Y+24	; 0x18
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	0e 94 4b 01 	call	0x296	; 0x296 <vfprintf>
 284:	ef 81       	ldd	r30, Y+7	; 0x07
 286:	f8 85       	ldd	r31, Y+8	; 0x08
 288:	e0 0f       	add	r30, r16
 28a:	f1 1f       	adc	r31, r17
 28c:	10 82       	st	Z, r1
 28e:	2e 96       	adiw	r28, 0x0e	; 14
 290:	e4 e0       	ldi	r30, 0x04	; 4
 292:	0c 94 06 04 	jmp	0x80c	; 0x80c <__epilogue_restores__+0x1c>

00000296 <vfprintf>:
 296:	ab e0       	ldi	r26, 0x0B	; 11
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e1 e5       	ldi	r30, 0x51	; 81
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__prologue_saves__>
 2a2:	6c 01       	movw	r12, r24
 2a4:	7b 01       	movw	r14, r22
 2a6:	8a 01       	movw	r16, r20
 2a8:	fc 01       	movw	r30, r24
 2aa:	17 82       	std	Z+7, r1	; 0x07
 2ac:	16 82       	std	Z+6, r1	; 0x06
 2ae:	83 81       	ldd	r24, Z+3	; 0x03
 2b0:	81 ff       	sbrs	r24, 1
 2b2:	cc c1       	rjmp	.+920    	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	3c 01       	movw	r6, r24
 2ba:	f6 01       	movw	r30, r12
 2bc:	93 81       	ldd	r25, Z+3	; 0x03
 2be:	f7 01       	movw	r30, r14
 2c0:	93 fd       	sbrc	r25, 3
 2c2:	85 91       	lpm	r24, Z+
 2c4:	93 ff       	sbrs	r25, 3
 2c6:	81 91       	ld	r24, Z+
 2c8:	7f 01       	movw	r14, r30
 2ca:	88 23       	and	r24, r24
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <vfprintf+0x3a>
 2ce:	ba c1       	rjmp	.+884    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 2d0:	85 32       	cpi	r24, 0x25	; 37
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <vfprintf+0x4c>
 2d4:	93 fd       	sbrc	r25, 3
 2d6:	85 91       	lpm	r24, Z+
 2d8:	93 ff       	sbrs	r25, 3
 2da:	81 91       	ld	r24, Z+
 2dc:	7f 01       	movw	r14, r30
 2de:	85 32       	cpi	r24, 0x25	; 37
 2e0:	29 f4       	brne	.+10     	; 0x2ec <vfprintf+0x56>
 2e2:	b6 01       	movw	r22, r12
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 2ea:	e7 cf       	rjmp	.-50     	; 0x2ba <vfprintf+0x24>
 2ec:	91 2c       	mov	r9, r1
 2ee:	21 2c       	mov	r2, r1
 2f0:	31 2c       	mov	r3, r1
 2f2:	ff e1       	ldi	r31, 0x1F	; 31
 2f4:	f3 15       	cp	r31, r3
 2f6:	d8 f0       	brcs	.+54     	; 0x32e <vfprintf+0x98>
 2f8:	8b 32       	cpi	r24, 0x2B	; 43
 2fa:	79 f0       	breq	.+30     	; 0x31a <vfprintf+0x84>
 2fc:	38 f4       	brcc	.+14     	; 0x30c <vfprintf+0x76>
 2fe:	80 32       	cpi	r24, 0x20	; 32
 300:	79 f0       	breq	.+30     	; 0x320 <vfprintf+0x8a>
 302:	83 32       	cpi	r24, 0x23	; 35
 304:	a1 f4       	brne	.+40     	; 0x32e <vfprintf+0x98>
 306:	23 2d       	mov	r18, r3
 308:	20 61       	ori	r18, 0x10	; 16
 30a:	1d c0       	rjmp	.+58     	; 0x346 <vfprintf+0xb0>
 30c:	8d 32       	cpi	r24, 0x2D	; 45
 30e:	61 f0       	breq	.+24     	; 0x328 <vfprintf+0x92>
 310:	80 33       	cpi	r24, 0x30	; 48
 312:	69 f4       	brne	.+26     	; 0x32e <vfprintf+0x98>
 314:	23 2d       	mov	r18, r3
 316:	21 60       	ori	r18, 0x01	; 1
 318:	16 c0       	rjmp	.+44     	; 0x346 <vfprintf+0xb0>
 31a:	83 2d       	mov	r24, r3
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	38 2e       	mov	r3, r24
 320:	e3 2d       	mov	r30, r3
 322:	e4 60       	ori	r30, 0x04	; 4
 324:	3e 2e       	mov	r3, r30
 326:	2a c0       	rjmp	.+84     	; 0x37c <vfprintf+0xe6>
 328:	f3 2d       	mov	r31, r3
 32a:	f8 60       	ori	r31, 0x08	; 8
 32c:	1d c0       	rjmp	.+58     	; 0x368 <vfprintf+0xd2>
 32e:	37 fc       	sbrc	r3, 7
 330:	2d c0       	rjmp	.+90     	; 0x38c <vfprintf+0xf6>
 332:	20 ed       	ldi	r18, 0xD0	; 208
 334:	28 0f       	add	r18, r24
 336:	2a 30       	cpi	r18, 0x0A	; 10
 338:	40 f0       	brcs	.+16     	; 0x34a <vfprintf+0xb4>
 33a:	8e 32       	cpi	r24, 0x2E	; 46
 33c:	b9 f4       	brne	.+46     	; 0x36c <vfprintf+0xd6>
 33e:	36 fc       	sbrc	r3, 6
 340:	81 c1       	rjmp	.+770    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 342:	23 2d       	mov	r18, r3
 344:	20 64       	ori	r18, 0x40	; 64
 346:	32 2e       	mov	r3, r18
 348:	19 c0       	rjmp	.+50     	; 0x37c <vfprintf+0xe6>
 34a:	36 fe       	sbrs	r3, 6
 34c:	06 c0       	rjmp	.+12     	; 0x35a <vfprintf+0xc4>
 34e:	8a e0       	ldi	r24, 0x0A	; 10
 350:	98 9e       	mul	r9, r24
 352:	20 0d       	add	r18, r0
 354:	11 24       	eor	r1, r1
 356:	92 2e       	mov	r9, r18
 358:	11 c0       	rjmp	.+34     	; 0x37c <vfprintf+0xe6>
 35a:	ea e0       	ldi	r30, 0x0A	; 10
 35c:	2e 9e       	mul	r2, r30
 35e:	20 0d       	add	r18, r0
 360:	11 24       	eor	r1, r1
 362:	22 2e       	mov	r2, r18
 364:	f3 2d       	mov	r31, r3
 366:	f0 62       	ori	r31, 0x20	; 32
 368:	3f 2e       	mov	r3, r31
 36a:	08 c0       	rjmp	.+16     	; 0x37c <vfprintf+0xe6>
 36c:	8c 36       	cpi	r24, 0x6C	; 108
 36e:	21 f4       	brne	.+8      	; 0x378 <vfprintf+0xe2>
 370:	83 2d       	mov	r24, r3
 372:	80 68       	ori	r24, 0x80	; 128
 374:	38 2e       	mov	r3, r24
 376:	02 c0       	rjmp	.+4      	; 0x37c <vfprintf+0xe6>
 378:	88 36       	cpi	r24, 0x68	; 104
 37a:	41 f4       	brne	.+16     	; 0x38c <vfprintf+0xf6>
 37c:	f7 01       	movw	r30, r14
 37e:	93 fd       	sbrc	r25, 3
 380:	85 91       	lpm	r24, Z+
 382:	93 ff       	sbrs	r25, 3
 384:	81 91       	ld	r24, Z+
 386:	7f 01       	movw	r14, r30
 388:	81 11       	cpse	r24, r1
 38a:	b3 cf       	rjmp	.-154    	; 0x2f2 <vfprintf+0x5c>
 38c:	98 2f       	mov	r25, r24
 38e:	9f 7d       	andi	r25, 0xDF	; 223
 390:	95 54       	subi	r25, 0x45	; 69
 392:	93 30       	cpi	r25, 0x03	; 3
 394:	28 f4       	brcc	.+10     	; 0x3a0 <vfprintf+0x10a>
 396:	0c 5f       	subi	r16, 0xFC	; 252
 398:	1f 4f       	sbci	r17, 0xFF	; 255
 39a:	9f e3       	ldi	r25, 0x3F	; 63
 39c:	99 83       	std	Y+1, r25	; 0x01
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <vfprintf+0x124>
 3a0:	83 36       	cpi	r24, 0x63	; 99
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <vfprintf+0x11a>
 3a4:	83 37       	cpi	r24, 0x73	; 115
 3a6:	71 f0       	breq	.+28     	; 0x3c4 <vfprintf+0x12e>
 3a8:	83 35       	cpi	r24, 0x53	; 83
 3aa:	09 f0       	breq	.+2      	; 0x3ae <vfprintf+0x118>
 3ac:	59 c0       	rjmp	.+178    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <vfprintf+0x15c>
 3b0:	f8 01       	movw	r30, r16
 3b2:	80 81       	ld	r24, Z
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	0e 5f       	subi	r16, 0xFE	; 254
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	88 24       	eor	r8, r8
 3bc:	83 94       	inc	r8
 3be:	91 2c       	mov	r9, r1
 3c0:	53 01       	movw	r10, r6
 3c2:	13 c0       	rjmp	.+38     	; 0x3ea <vfprintf+0x154>
 3c4:	28 01       	movw	r4, r16
 3c6:	f2 e0       	ldi	r31, 0x02	; 2
 3c8:	4f 0e       	add	r4, r31
 3ca:	51 1c       	adc	r5, r1
 3cc:	f8 01       	movw	r30, r16
 3ce:	a0 80       	ld	r10, Z
 3d0:	b1 80       	ldd	r11, Z+1	; 0x01
 3d2:	36 fe       	sbrs	r3, 6
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <vfprintf+0x146>
 3d6:	69 2d       	mov	r22, r9
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <vfprintf+0x14a>
 3dc:	6f ef       	ldi	r22, 0xFF	; 255
 3de:	7f ef       	ldi	r23, 0xFF	; 255
 3e0:	c5 01       	movw	r24, r10
 3e2:	0e 94 37 03 	call	0x66e	; 0x66e <strnlen>
 3e6:	4c 01       	movw	r8, r24
 3e8:	82 01       	movw	r16, r4
 3ea:	f3 2d       	mov	r31, r3
 3ec:	ff 77       	andi	r31, 0x7F	; 127
 3ee:	3f 2e       	mov	r3, r31
 3f0:	16 c0       	rjmp	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f2:	28 01       	movw	r4, r16
 3f4:	22 e0       	ldi	r18, 0x02	; 2
 3f6:	42 0e       	add	r4, r18
 3f8:	51 1c       	adc	r5, r1
 3fa:	f8 01       	movw	r30, r16
 3fc:	a0 80       	ld	r10, Z
 3fe:	b1 80       	ldd	r11, Z+1	; 0x01
 400:	36 fe       	sbrs	r3, 6
 402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	69 2d       	mov	r22, r9
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	6f ef       	ldi	r22, 0xFF	; 255
 40c:	7f ef       	ldi	r23, 0xFF	; 255
 40e:	c5 01       	movw	r24, r10
 410:	0e 94 2c 03 	call	0x658	; 0x658 <strnlen_P>
 414:	4c 01       	movw	r8, r24
 416:	f3 2d       	mov	r31, r3
 418:	f0 68       	ori	r31, 0x80	; 128
 41a:	3f 2e       	mov	r3, r31
 41c:	82 01       	movw	r16, r4
 41e:	33 fc       	sbrc	r3, 3
 420:	1b c0       	rjmp	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 422:	82 2d       	mov	r24, r2
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	88 16       	cp	r8, r24
 428:	99 06       	cpc	r9, r25
 42a:	b0 f4       	brcc	.+44     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 42c:	b6 01       	movw	r22, r12
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 436:	2a 94       	dec	r2
 438:	f4 cf       	rjmp	.-24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 43a:	f5 01       	movw	r30, r10
 43c:	37 fc       	sbrc	r3, 7
 43e:	85 91       	lpm	r24, Z+
 440:	37 fe       	sbrs	r3, 7
 442:	81 91       	ld	r24, Z+
 444:	5f 01       	movw	r10, r30
 446:	b6 01       	movw	r22, r12
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 44e:	21 10       	cpse	r2, r1
 450:	2a 94       	dec	r2
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	82 1a       	sub	r8, r18
 456:	91 08       	sbc	r9, r1
 458:	81 14       	cp	r8, r1
 45a:	91 04       	cpc	r9, r1
 45c:	71 f7       	brne	.-36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 45e:	e8 c0       	rjmp	.+464    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 460:	84 36       	cpi	r24, 0x64	; 100
 462:	11 f0       	breq	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 464:	89 36       	cpi	r24, 0x69	; 105
 466:	41 f5       	brne	.+80     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 468:	f8 01       	movw	r30, r16
 46a:	37 fe       	sbrs	r3, 7
 46c:	07 c0       	rjmp	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 46e:	60 81       	ld	r22, Z
 470:	71 81       	ldd	r23, Z+1	; 0x01
 472:	82 81       	ldd	r24, Z+2	; 0x02
 474:	93 81       	ldd	r25, Z+3	; 0x03
 476:	0c 5f       	subi	r16, 0xFC	; 252
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	08 c0       	rjmp	.+16     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 47c:	60 81       	ld	r22, Z
 47e:	71 81       	ldd	r23, Z+1	; 0x01
 480:	07 2e       	mov	r0, r23
 482:	00 0c       	add	r0, r0
 484:	88 0b       	sbc	r24, r24
 486:	99 0b       	sbc	r25, r25
 488:	0e 5f       	subi	r16, 0xFE	; 254
 48a:	1f 4f       	sbci	r17, 0xFF	; 255
 48c:	f3 2d       	mov	r31, r3
 48e:	ff 76       	andi	r31, 0x6F	; 111
 490:	3f 2e       	mov	r3, r31
 492:	97 ff       	sbrs	r25, 7
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 496:	90 95       	com	r25
 498:	80 95       	com	r24
 49a:	70 95       	com	r23
 49c:	61 95       	neg	r22
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	f0 68       	ori	r31, 0x80	; 128
 4a6:	3f 2e       	mov	r3, r31
 4a8:	2a e0       	ldi	r18, 0x0A	; 10
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	a3 01       	movw	r20, r6
 4ae:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__ultoa_invert>
 4b2:	88 2e       	mov	r8, r24
 4b4:	86 18       	sub	r8, r6
 4b6:	45 c0       	rjmp	.+138    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 4b8:	85 37       	cpi	r24, 0x75	; 117
 4ba:	31 f4       	brne	.+12     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4bc:	23 2d       	mov	r18, r3
 4be:	2f 7e       	andi	r18, 0xEF	; 239
 4c0:	b2 2e       	mov	r11, r18
 4c2:	2a e0       	ldi	r18, 0x0A	; 10
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	25 c0       	rjmp	.+74     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4c8:	93 2d       	mov	r25, r3
 4ca:	99 7f       	andi	r25, 0xF9	; 249
 4cc:	b9 2e       	mov	r11, r25
 4ce:	8f 36       	cpi	r24, 0x6F	; 111
 4d0:	c1 f0       	breq	.+48     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4d2:	18 f4       	brcc	.+6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d4:	88 35       	cpi	r24, 0x58	; 88
 4d6:	79 f0       	breq	.+30     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4d8:	b5 c0       	rjmp	.+362    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 4da:	80 37       	cpi	r24, 0x70	; 112
 4dc:	19 f0       	breq	.+6      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4de:	88 37       	cpi	r24, 0x78	; 120
 4e0:	21 f0       	breq	.+8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e2:	b0 c0       	rjmp	.+352    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 4e4:	e9 2f       	mov	r30, r25
 4e6:	e0 61       	ori	r30, 0x10	; 16
 4e8:	be 2e       	mov	r11, r30
 4ea:	b4 fe       	sbrs	r11, 4
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ee:	fb 2d       	mov	r31, r11
 4f0:	f4 60       	ori	r31, 0x04	; 4
 4f2:	bf 2e       	mov	r11, r31
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4f6:	34 fe       	sbrs	r3, 4
 4f8:	0a c0       	rjmp	.+20     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4fa:	29 2f       	mov	r18, r25
 4fc:	26 60       	ori	r18, 0x06	; 6
 4fe:	b2 2e       	mov	r11, r18
 500:	06 c0       	rjmp	.+12     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 502:	28 e0       	ldi	r18, 0x08	; 8
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	05 c0       	rjmp	.+10     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 508:	20 e1       	ldi	r18, 0x10	; 16
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50e:	20 e1       	ldi	r18, 0x10	; 16
 510:	32 e0       	ldi	r19, 0x02	; 2
 512:	f8 01       	movw	r30, r16
 514:	b7 fe       	sbrs	r11, 7
 516:	07 c0       	rjmp	.+14     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 518:	60 81       	ld	r22, Z
 51a:	71 81       	ldd	r23, Z+1	; 0x01
 51c:	82 81       	ldd	r24, Z+2	; 0x02
 51e:	93 81       	ldd	r25, Z+3	; 0x03
 520:	0c 5f       	subi	r16, 0xFC	; 252
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	06 c0       	rjmp	.+12     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 526:	60 81       	ld	r22, Z
 528:	71 81       	ldd	r23, Z+1	; 0x01
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 5f       	subi	r16, 0xFE	; 254
 530:	1f 4f       	sbci	r17, 0xFF	; 255
 532:	a3 01       	movw	r20, r6
 534:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__ultoa_invert>
 538:	88 2e       	mov	r8, r24
 53a:	86 18       	sub	r8, r6
 53c:	fb 2d       	mov	r31, r11
 53e:	ff 77       	andi	r31, 0x7F	; 127
 540:	3f 2e       	mov	r3, r31
 542:	36 fe       	sbrs	r3, 6
 544:	0d c0       	rjmp	.+26     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 546:	23 2d       	mov	r18, r3
 548:	2e 7f       	andi	r18, 0xFE	; 254
 54a:	a2 2e       	mov	r10, r18
 54c:	89 14       	cp	r8, r9
 54e:	58 f4       	brcc	.+22     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 550:	34 fe       	sbrs	r3, 4
 552:	0b c0       	rjmp	.+22     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 554:	32 fc       	sbrc	r3, 2
 556:	09 c0       	rjmp	.+18     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 558:	83 2d       	mov	r24, r3
 55a:	8e 7e       	andi	r24, 0xEE	; 238
 55c:	a8 2e       	mov	r10, r24
 55e:	05 c0       	rjmp	.+10     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 560:	b8 2c       	mov	r11, r8
 562:	a3 2c       	mov	r10, r3
 564:	03 c0       	rjmp	.+6      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 566:	b8 2c       	mov	r11, r8
 568:	01 c0       	rjmp	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56a:	b9 2c       	mov	r11, r9
 56c:	a4 fe       	sbrs	r10, 4
 56e:	0f c0       	rjmp	.+30     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 570:	fe 01       	movw	r30, r28
 572:	e8 0d       	add	r30, r8
 574:	f1 1d       	adc	r31, r1
 576:	80 81       	ld	r24, Z
 578:	80 33       	cpi	r24, 0x30	; 48
 57a:	21 f4       	brne	.+8      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 57c:	9a 2d       	mov	r25, r10
 57e:	99 7e       	andi	r25, 0xE9	; 233
 580:	a9 2e       	mov	r10, r25
 582:	09 c0       	rjmp	.+18     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 584:	a2 fe       	sbrs	r10, 2
 586:	06 c0       	rjmp	.+12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 588:	b3 94       	inc	r11
 58a:	b3 94       	inc	r11
 58c:	04 c0       	rjmp	.+8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 58e:	8a 2d       	mov	r24, r10
 590:	86 78       	andi	r24, 0x86	; 134
 592:	09 f0       	breq	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 594:	b3 94       	inc	r11
 596:	a3 fc       	sbrc	r10, 3
 598:	11 c0       	rjmp	.+34     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 59a:	a0 fe       	sbrs	r10, 0
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 59e:	b2 14       	cp	r11, r2
 5a0:	88 f4       	brcc	.+34     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5a2:	28 0c       	add	r2, r8
 5a4:	92 2c       	mov	r9, r2
 5a6:	9b 18       	sub	r9, r11
 5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5aa:	b2 14       	cp	r11, r2
 5ac:	60 f4       	brcc	.+24     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5ae:	b6 01       	movw	r22, r12
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 5b8:	b3 94       	inc	r11
 5ba:	f7 cf       	rjmp	.-18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5bc:	b2 14       	cp	r11, r2
 5be:	18 f4       	brcc	.+6      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5c0:	2b 18       	sub	r2, r11
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c4:	98 2c       	mov	r9, r8
 5c6:	21 2c       	mov	r2, r1
 5c8:	a4 fe       	sbrs	r10, 4
 5ca:	10 c0       	rjmp	.+32     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5cc:	b6 01       	movw	r22, r12
 5ce:	80 e3       	ldi	r24, 0x30	; 48
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 5d6:	a2 fe       	sbrs	r10, 2
 5d8:	17 c0       	rjmp	.+46     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5da:	a1 fc       	sbrc	r10, 1
 5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5de:	88 e7       	ldi	r24, 0x78	; 120
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5e4:	88 e5       	ldi	r24, 0x58	; 88
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	b6 01       	movw	r22, r12
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5ec:	8a 2d       	mov	r24, r10
 5ee:	86 78       	andi	r24, 0x86	; 134
 5f0:	59 f0       	breq	.+22     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5f2:	a1 fe       	sbrs	r10, 1
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5f6:	8b e2       	ldi	r24, 0x2B	; 43
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5fa:	80 e2       	ldi	r24, 0x20	; 32
 5fc:	a7 fc       	sbrc	r10, 7
 5fe:	8d e2       	ldi	r24, 0x2D	; 45
 600:	b6 01       	movw	r22, r12
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 608:	89 14       	cp	r8, r9
 60a:	38 f4       	brcc	.+14     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 60c:	b6 01       	movw	r22, r12
 60e:	80 e3       	ldi	r24, 0x30	; 48
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 616:	9a 94       	dec	r9
 618:	f7 cf       	rjmp	.-18     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 61a:	8a 94       	dec	r8
 61c:	f3 01       	movw	r30, r6
 61e:	e8 0d       	add	r30, r8
 620:	f1 1d       	adc	r31, r1
 622:	80 81       	ld	r24, Z
 624:	b6 01       	movw	r22, r12
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 62c:	81 10       	cpse	r8, r1
 62e:	f5 cf       	rjmp	.-22     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 630:	22 20       	and	r2, r2
 632:	09 f4       	brne	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 634:	42 ce       	rjmp	.-892    	; 0x2ba <vfprintf+0x24>
 636:	b6 01       	movw	r22, r12
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 42 03 	call	0x684	; 0x684 <fputc>
 640:	2a 94       	dec	r2
 642:	f6 cf       	rjmp	.-20     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 644:	f6 01       	movw	r30, r12
 646:	86 81       	ldd	r24, Z+6	; 0x06
 648:	97 81       	ldd	r25, Z+7	; 0x07
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	2b 96       	adiw	r28, 0x0b	; 11
 652:	e2 e1       	ldi	r30, 0x12	; 18
 654:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__epilogue_restores__>

00000658 <strnlen_P>:
 658:	fc 01       	movw	r30, r24
 65a:	05 90       	lpm	r0, Z+
 65c:	61 50       	subi	r22, 0x01	; 1
 65e:	70 40       	sbci	r23, 0x00	; 0
 660:	01 10       	cpse	r0, r1
 662:	d8 f7       	brcc	.-10     	; 0x65a <strnlen_P+0x2>
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	8e 0f       	add	r24, r30
 66a:	9f 1f       	adc	r25, r31
 66c:	08 95       	ret

0000066e <strnlen>:
 66e:	fc 01       	movw	r30, r24
 670:	61 50       	subi	r22, 0x01	; 1
 672:	70 40       	sbci	r23, 0x00	; 0
 674:	01 90       	ld	r0, Z+
 676:	01 10       	cpse	r0, r1
 678:	d8 f7       	brcc	.-10     	; 0x670 <strnlen+0x2>
 67a:	80 95       	com	r24
 67c:	90 95       	com	r25
 67e:	8e 0f       	add	r24, r30
 680:	9f 1f       	adc	r25, r31
 682:	08 95       	ret

00000684 <fputc>:
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	fb 01       	movw	r30, r22
 68e:	23 81       	ldd	r18, Z+3	; 0x03
 690:	21 fd       	sbrc	r18, 1
 692:	03 c0       	rjmp	.+6      	; 0x69a <fputc+0x16>
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	2c c0       	rjmp	.+88     	; 0x6f2 <fputc+0x6e>
 69a:	22 ff       	sbrs	r18, 2
 69c:	16 c0       	rjmp	.+44     	; 0x6ca <fputc+0x46>
 69e:	46 81       	ldd	r20, Z+6	; 0x06
 6a0:	57 81       	ldd	r21, Z+7	; 0x07
 6a2:	24 81       	ldd	r18, Z+4	; 0x04
 6a4:	35 81       	ldd	r19, Z+5	; 0x05
 6a6:	42 17       	cp	r20, r18
 6a8:	53 07       	cpc	r21, r19
 6aa:	44 f4       	brge	.+16     	; 0x6bc <fputc+0x38>
 6ac:	a0 81       	ld	r26, Z
 6ae:	b1 81       	ldd	r27, Z+1	; 0x01
 6b0:	9d 01       	movw	r18, r26
 6b2:	2f 5f       	subi	r18, 0xFF	; 255
 6b4:	3f 4f       	sbci	r19, 0xFF	; 255
 6b6:	31 83       	std	Z+1, r19	; 0x01
 6b8:	20 83       	st	Z, r18
 6ba:	8c 93       	st	X, r24
 6bc:	26 81       	ldd	r18, Z+6	; 0x06
 6be:	37 81       	ldd	r19, Z+7	; 0x07
 6c0:	2f 5f       	subi	r18, 0xFF	; 255
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	37 83       	std	Z+7, r19	; 0x07
 6c6:	26 83       	std	Z+6, r18	; 0x06
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <fputc+0x6e>
 6ca:	8b 01       	movw	r16, r22
 6cc:	ec 01       	movw	r28, r24
 6ce:	fb 01       	movw	r30, r22
 6d0:	00 84       	ldd	r0, Z+8	; 0x08
 6d2:	f1 85       	ldd	r31, Z+9	; 0x09
 6d4:	e0 2d       	mov	r30, r0
 6d6:	09 95       	icall
 6d8:	89 2b       	or	r24, r25
 6da:	e1 f6       	brne	.-72     	; 0x694 <fputc+0x10>
 6dc:	d8 01       	movw	r26, r16
 6de:	16 96       	adiw	r26, 0x06	; 6
 6e0:	8d 91       	ld	r24, X+
 6e2:	9c 91       	ld	r25, X
 6e4:	17 97       	sbiw	r26, 0x07	; 7
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	17 96       	adiw	r26, 0x07	; 7
 6ea:	9c 93       	st	X, r25
 6ec:	8e 93       	st	-X, r24
 6ee:	16 97       	sbiw	r26, 0x06	; 6
 6f0:	ce 01       	movw	r24, r28
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	08 95       	ret

000006fc <__ultoa_invert>:
 6fc:	fa 01       	movw	r30, r20
 6fe:	aa 27       	eor	r26, r26
 700:	28 30       	cpi	r18, 0x08	; 8
 702:	51 f1       	breq	.+84     	; 0x758 <__ultoa_invert+0x5c>
 704:	20 31       	cpi	r18, 0x10	; 16
 706:	81 f1       	breq	.+96     	; 0x768 <__ultoa_invert+0x6c>
 708:	e8 94       	clt
 70a:	6f 93       	push	r22
 70c:	6e 7f       	andi	r22, 0xFE	; 254
 70e:	6e 5f       	subi	r22, 0xFE	; 254
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	af 4f       	sbci	r26, 0xFF	; 255
 718:	b1 e0       	ldi	r27, 0x01	; 1
 71a:	3e d0       	rcall	.+124    	; 0x798 <__ultoa_invert+0x9c>
 71c:	b4 e0       	ldi	r27, 0x04	; 4
 71e:	3c d0       	rcall	.+120    	; 0x798 <__ultoa_invert+0x9c>
 720:	67 0f       	add	r22, r23
 722:	78 1f       	adc	r23, r24
 724:	89 1f       	adc	r24, r25
 726:	9a 1f       	adc	r25, r26
 728:	a1 1d       	adc	r26, r1
 72a:	68 0f       	add	r22, r24
 72c:	79 1f       	adc	r23, r25
 72e:	8a 1f       	adc	r24, r26
 730:	91 1d       	adc	r25, r1
 732:	a1 1d       	adc	r26, r1
 734:	6a 0f       	add	r22, r26
 736:	71 1d       	adc	r23, r1
 738:	81 1d       	adc	r24, r1
 73a:	91 1d       	adc	r25, r1
 73c:	a1 1d       	adc	r26, r1
 73e:	20 d0       	rcall	.+64     	; 0x780 <__ultoa_invert+0x84>
 740:	09 f4       	brne	.+2      	; 0x744 <__ultoa_invert+0x48>
 742:	68 94       	set
 744:	3f 91       	pop	r19
 746:	2a e0       	ldi	r18, 0x0A	; 10
 748:	26 9f       	mul	r18, r22
 74a:	11 24       	eor	r1, r1
 74c:	30 19       	sub	r19, r0
 74e:	30 5d       	subi	r19, 0xD0	; 208
 750:	31 93       	st	Z+, r19
 752:	de f6       	brtc	.-74     	; 0x70a <__ultoa_invert+0xe>
 754:	cf 01       	movw	r24, r30
 756:	08 95       	ret
 758:	46 2f       	mov	r20, r22
 75a:	47 70       	andi	r20, 0x07	; 7
 75c:	40 5d       	subi	r20, 0xD0	; 208
 75e:	41 93       	st	Z+, r20
 760:	b3 e0       	ldi	r27, 0x03	; 3
 762:	0f d0       	rcall	.+30     	; 0x782 <__ultoa_invert+0x86>
 764:	c9 f7       	brne	.-14     	; 0x758 <__ultoa_invert+0x5c>
 766:	f6 cf       	rjmp	.-20     	; 0x754 <__ultoa_invert+0x58>
 768:	46 2f       	mov	r20, r22
 76a:	4f 70       	andi	r20, 0x0F	; 15
 76c:	40 5d       	subi	r20, 0xD0	; 208
 76e:	4a 33       	cpi	r20, 0x3A	; 58
 770:	18 f0       	brcs	.+6      	; 0x778 <__ultoa_invert+0x7c>
 772:	49 5d       	subi	r20, 0xD9	; 217
 774:	31 fd       	sbrc	r19, 1
 776:	40 52       	subi	r20, 0x20	; 32
 778:	41 93       	st	Z+, r20
 77a:	02 d0       	rcall	.+4      	; 0x780 <__ultoa_invert+0x84>
 77c:	a9 f7       	brne	.-22     	; 0x768 <__ultoa_invert+0x6c>
 77e:	ea cf       	rjmp	.-44     	; 0x754 <__ultoa_invert+0x58>
 780:	b4 e0       	ldi	r27, 0x04	; 4
 782:	a6 95       	lsr	r26
 784:	97 95       	ror	r25
 786:	87 95       	ror	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	ba 95       	dec	r27
 78e:	c9 f7       	brne	.-14     	; 0x782 <__ultoa_invert+0x86>
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	61 05       	cpc	r22, r1
 794:	71 05       	cpc	r23, r1
 796:	08 95       	ret
 798:	9b 01       	movw	r18, r22
 79a:	ac 01       	movw	r20, r24
 79c:	0a 2e       	mov	r0, r26
 79e:	06 94       	lsr	r0
 7a0:	57 95       	ror	r21
 7a2:	47 95       	ror	r20
 7a4:	37 95       	ror	r19
 7a6:	27 95       	ror	r18
 7a8:	ba 95       	dec	r27
 7aa:	c9 f7       	brne	.-14     	; 0x79e <__ultoa_invert+0xa2>
 7ac:	62 0f       	add	r22, r18
 7ae:	73 1f       	adc	r23, r19
 7b0:	84 1f       	adc	r24, r20
 7b2:	95 1f       	adc	r25, r21
 7b4:	a0 1d       	adc	r26, r0
 7b6:	08 95       	ret

000007b8 <__prologue_saves__>:
 7b8:	2f 92       	push	r2
 7ba:	3f 92       	push	r3
 7bc:	4f 92       	push	r4
 7be:	5f 92       	push	r5
 7c0:	6f 92       	push	r6
 7c2:	7f 92       	push	r7
 7c4:	8f 92       	push	r8
 7c6:	9f 92       	push	r9
 7c8:	af 92       	push	r10
 7ca:	bf 92       	push	r11
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	ca 1b       	sub	r28, r26
 7e2:	db 0b       	sbc	r29, r27
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	f8 94       	cli
 7e8:	de bf       	out	0x3e, r29	; 62
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	cd bf       	out	0x3d, r28	; 61
 7ee:	09 94       	ijmp

000007f0 <__epilogue_restores__>:
 7f0:	2a 88       	ldd	r2, Y+18	; 0x12
 7f2:	39 88       	ldd	r3, Y+17	; 0x11
 7f4:	48 88       	ldd	r4, Y+16	; 0x10
 7f6:	5f 84       	ldd	r5, Y+15	; 0x0f
 7f8:	6e 84       	ldd	r6, Y+14	; 0x0e
 7fa:	7d 84       	ldd	r7, Y+13	; 0x0d
 7fc:	8c 84       	ldd	r8, Y+12	; 0x0c
 7fe:	9b 84       	ldd	r9, Y+11	; 0x0b
 800:	aa 84       	ldd	r10, Y+10	; 0x0a
 802:	b9 84       	ldd	r11, Y+9	; 0x09
 804:	c8 84       	ldd	r12, Y+8	; 0x08
 806:	df 80       	ldd	r13, Y+7	; 0x07
 808:	ee 80       	ldd	r14, Y+6	; 0x06
 80a:	fd 80       	ldd	r15, Y+5	; 0x05
 80c:	0c 81       	ldd	r16, Y+4	; 0x04
 80e:	1b 81       	ldd	r17, Y+3	; 0x03
 810:	aa 81       	ldd	r26, Y+2	; 0x02
 812:	b9 81       	ldd	r27, Y+1	; 0x01
 814:	ce 0f       	add	r28, r30
 816:	d1 1d       	adc	r29, r1
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	ed 01       	movw	r28, r26
 824:	08 95       	ret

00000826 <_exit>:
 826:	f8 94       	cli

00000828 <__stop_program>:
 828:	ff cf       	rjmp	.-2      	; 0x828 <__stop_program>
