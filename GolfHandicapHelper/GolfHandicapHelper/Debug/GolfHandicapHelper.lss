
GolfHandicapHelper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000306  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd5  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093b  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000657  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000296  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	6a 00       	.word	0x006a	; ????
  6a:	70 00       	.word	0x0070	; ????
  6c:	77 00       	.word	0x0077	; ????
  6e:	7f 00       	.word	0x007f	; ????
  70:	88 00       	.word	0x0088	; ????
  72:	90 00       	.word	0x0090	; ????
  74:	99 00       	.word	0x0099	; ????
  76:	ae 00       	.word	0x00ae	; ????
  78:	af 00       	.word	0x00af	; ????
  7a:	b0 00       	.word	0x00b0	; ????
  7c:	b1 00       	.word	0x00b1	; ????
  7e:	b2 00       	.word	0x00b2	; ????
  80:	b3 00       	.word	0x00b3	; ????
  82:	b4 00       	.word	0x00b4	; ????
  84:	b5 00       	.word	0x00b5	; ????
  86:	bf 00       	.word	0x00bf	; ????
  88:	c0 00       	.word	0x00c0	; ????
  8a:	c1 00       	.word	0x00c1	; ????
  8c:	c2 00       	.word	0x00c2	; ????
  8e:	c3 00       	.word	0x00c3	; ????
  90:	c4 00       	.word	0x00c4	; ????
  92:	c5 00       	.word	0x00c5	; ????
  94:	c6 00       	.word	0x00c6	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	e6 e0       	ldi	r30, 0x06	; 6
  aa:	f3 e0       	ldi	r31, 0x03	; 3
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a4 31       	cpi	r26, 0x14	; 20
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>
  b8:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  bc:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <isButtonNoPressed_C>:
	\returns TRUE or FALSE
*/
/* ------------------------------------------------------------------------- */
int isButtonNoPressed_C(int No)
{
	switch (No) {
  c4:	87 30       	cpi	r24, 0x07	; 7
  c6:	91 05       	cpc	r25, r1
  c8:	f0 f5       	brcc	.+124    	; 0x146 <isButtonNoPressed_C+0x82>
  ca:	fc 01       	movw	r30, r24
  cc:	ec 5c       	subi	r30, 0xCC	; 204
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__tablejump2__>
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
  d4:	96 b1       	in	r25, 0x06	; 6
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	89 27       	eor	r24, r25
				return TRUE;
  da:	81 70       	andi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret
				return FALSE;
			}
			break;
			
		case 1:
			if ((PINC & (1<<PC1)) == 0) {
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	86 95       	lsr	r24
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	89 27       	eor	r24, r25
int isButtonNoPressed_C(int No)
{
	switch (No) {
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
				return TRUE;
  e8:	81 70       	andi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
				return FALSE;
			}
			break;
			
		case 2:
			if ((PINC & (1<<PC2)) == 0) {
  ee:	86 b1       	in	r24, 0x06	; 6
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	89 27       	eor	r24, r25
int isButtonNoPressed_C(int No)
{
	switch (No) {
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
				return TRUE;
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
				return FALSE;
			}
			break;
			
		case 3:
			if ((PINC & (1<<PC3)) == 0) {
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	86 95       	lsr	r24
 102:	86 95       	lsr	r24
 104:	86 95       	lsr	r24
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	89 27       	eor	r24, r25
int isButtonNoPressed_C(int No)
{
	switch (No) {
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
				return TRUE;
 10a:	81 70       	andi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
				return FALSE;
			}
			break;
			
		case 4:
		if ((PINC & (1<<PC4)) == 0) {
 110:	86 b1       	in	r24, 0x06	; 6
 112:	82 95       	swap	r24
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	89 27       	eor	r24, r25
int isButtonNoPressed_C(int No)
{
	switch (No) {
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
				return TRUE;
 11a:	81 70       	andi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
			return FALSE;
		}
		break;
		
		case 5:
		if ((PINC & (1<<PC5)) == 0) {
 120:	86 b1       	in	r24, 0x06	; 6
 122:	82 95       	swap	r24
 124:	86 95       	lsr	r24
 126:	87 70       	andi	r24, 0x07	; 7
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	89 27       	eor	r24, r25
int isButtonNoPressed_C(int No)
{
	switch (No) {
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
				return TRUE;
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
			return FALSE;
		}
		break;
		
		case 6:
		if ((PINC & (1<<PC6)) == 0) {
 132:	86 b1       	in	r24, 0x06	; 6
 134:	82 95       	swap	r24
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	83 70       	andi	r24, 0x03	; 3
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	89 27       	eor	r24, r25
int isButtonNoPressed_C(int No)
{
	switch (No) {
		case 0: 
			if ((PINC & (1<<PC0)) == 0) {
				return TRUE;
 140:	81 70       	andi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret
			return FALSE;
		}
		break;

		default:
			return FALSE;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 14a:	08 95       	ret

0000014c <turnOnNo_B>:
	Turns on PBX, where X is the input given to function
*/
/* ------------------------------------------------------------------------- */
void turnOnNo_B(int No)
{
	switch (No) {
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	91 05       	cpc	r25, r1
 150:	68 f4       	brcc	.+26     	; 0x16c <turnOnNo_B+0x20>
 152:	fc 01       	movw	r30, r24
 154:	e5 5c       	subi	r30, 0xC5	; 197
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__tablejump2__>
		case 0:
			PB0_ON;
 15c:	28 9a       	sbi	0x05, 0	; 5
		case 1: 
			PB1_ON;
 15e:	29 9a       	sbi	0x05, 1	; 5
		case 2: 
			PB2_ON;
 160:	2a 9a       	sbi	0x05, 2	; 5
		case 3:
			PB3_ON;
 162:	2b 9a       	sbi	0x05, 3	; 5
		case 4:
			PB4_ON;
 164:	2c 9a       	sbi	0x05, 4	; 5
		case 5:
			PB5_ON;
 166:	2d 9a       	sbi	0x05, 5	; 5
		case 6:
			PB6_ON;
 168:	2e 9a       	sbi	0x05, 6	; 5
		case 7:
			PB7_ON;
 16a:	2f 9a       	sbi	0x05, 7	; 5
 16c:	08 95       	ret

0000016e <turnOffNo_B>:
	Turns off PBX, where X is the input given to function
*/
/* ------------------------------------------------------------------------- */
void turnOffNo_B(int No)
{
	switch (No) {
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	91 05       	cpc	r25, r1
 172:	68 f4       	brcc	.+26     	; 0x18e <turnOffNo_B+0x20>
 174:	fc 01       	movw	r30, r24
 176:	ed 5b       	subi	r30, 0xBD	; 189
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__tablejump2__>
		case 0:
			PB0_OFF;
 17e:	28 98       	cbi	0x05, 0	; 5
		case 1:
			PB1_OFF;
 180:	29 98       	cbi	0x05, 1	; 5
		case 2:
			PB2_OFF;
 182:	2a 98       	cbi	0x05, 2	; 5
		case 3:
			PB3_OFF;
 184:	2b 98       	cbi	0x05, 3	; 5
		case 4:
			PB4_OFF;
 186:	2c 98       	cbi	0x05, 4	; 5
		case 5:
			PB5_OFF;
 188:	2d 98       	cbi	0x05, 5	; 5
		case 6:
			PB6_OFF;
 18a:	2e 98       	cbi	0x05, 6	; 5
		case 7:
			PB7_OFF;
 18c:	2f 98       	cbi	0x05, 7	; 5
 18e:	08 95       	ret

00000190 <send_it>:
	Performs the actions needed to send data 
*/
/* ------------------------------------------------------------------------- */
void send_it(void) 
{
	ENABLE;
 190:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	86 ea       	ldi	r24, 0xA6	; 166
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <send_it+0x4>
 198:	00 c0       	rjmp	.+0      	; 0x19a <send_it+0xa>
	_delay_us(500);
	DISABLE;
 19a:	2a 98       	cbi	0x05, 2	; 5
 19c:	86 ea       	ldi	r24, 0xA6	; 166
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <send_it+0xe>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <send_it+0x14>
 1a4:	08 95       	ret

000001a6 <printLcd>:
/*
	Prints the characters given from input to function
*/
/* ------------------------------------------------------------------------- */
void printLcd(char *input) 
{
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	RS_SIGN;	
 1ae:	29 9a       	sbi	0x05, 1	; 5
	int a = strlen(input); 
 1b0:	fc 01       	movw	r30, r24
 1b2:	01 90       	ld	r0, Z+
 1b4:	00 20       	and	r0, r0
 1b6:	e9 f7       	brne	.-6      	; 0x1b2 <printLcd+0xc>
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	e8 1b       	sub	r30, r24
 1bc:	f9 0b       	sbc	r31, r25
	for (int ix = 0; ix < a; ix++){
 1be:	1e 16       	cp	r1, r30
 1c0:	1f 06       	cpc	r1, r31
 1c2:	5c f4       	brge	.+22     	; 0x1da <printLcd+0x34>
 1c4:	ec 01       	movw	r28, r24
 1c6:	8c 01       	movw	r16, r24
 1c8:	0e 0f       	add	r16, r30
 1ca:	1f 1f       	adc	r17, r31
		PORTD = input[ix];
 1cc:	99 91       	ld	r25, Y+
 1ce:	9b b9       	out	0x0b, r25	; 11
		send_it();
 1d0:	0e 94 c8 00 	call	0x190	; 0x190 <send_it>
/* ------------------------------------------------------------------------- */
void printLcd(char *input) 
{
	RS_SIGN;	
	int a = strlen(input); 
	for (int ix = 0; ix < a; ix++){
 1d4:	c0 17       	cp	r28, r16
 1d6:	d1 07       	cpc	r29, r17
 1d8:	c9 f7       	brne	.-14     	; 0x1cc <printLcd+0x26>
		PORTD = input[ix];
		send_it();
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <set_cursorLcd>:
	Sets the cursor to x, y for next character
*/
/* ------------------------------------------------------------------------- */
void set_cursorLcd(int a, int b) 
{
	RS_INSTR;
 1e4:	29 98       	cbi	0x05, 1	; 5
	if (a==1){
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <set_cursorLcd+0x12>
		PORTD = 0x80 + b;
 1ec:	60 58       	subi	r22, 0x80	; 128
 1ee:	6b b9       	out	0x0b, r22	; 11
		send_it();
 1f0:	0e 94 c8 00 	call	0x190	; 0x190 <send_it>
 1f4:	08 95       	ret
	}
	else if (a==2){
 1f6:	02 97       	sbiw	r24, 0x02	; 2
 1f8:	21 f4       	brne	.+8      	; 0x202 <set_cursorLcd+0x1e>
		PORTD = 0xC0 + b;
 1fa:	60 54       	subi	r22, 0x40	; 64
 1fc:	6b b9       	out	0x0b, r22	; 11
		send_it();
 1fe:	0e 94 c8 00 	call	0x190	; 0x190 <send_it>
 202:	08 95       	ret

00000204 <clearLcd>:
	Clears screen
*/
/* ------------------------------------------------------------------------- */
void clearLcd(void) 
{
	RS_INSTR;
 204:	29 98       	cbi	0x05, 1	; 5
	//Clear screen
	PORTD = 0x01;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	8b b9       	out	0x0b, r24	; 11
	send_it();
 20a:	0e 94 c8 00 	call	0x190	; 0x190 <send_it>
 20e:	08 95       	ret

00000210 <initLcd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	83 ed       	ldi	r24, 0xD3	; 211
 212:	90 e3       	ldi	r25, 0x30	; 48
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <initLcd+0x4>
 218:	00 c0       	rjmp	.+0      	; 0x21a <initLcd+0xa>
 21a:	00 00       	nop
*/
/* ------------------------------------------------------------------------- */
void initLcd(void) 
{
	_delay_ms(50);
	RS_INSTR;
 21c:	29 98       	cbi	0x05, 1	; 5
	DISABLE;
 21e:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	96 ea       	ldi	r25, 0xA6	; 166
 222:	9a 95       	dec	r25
 224:	f1 f7       	brne	.-4      	; 0x222 <initLcd+0x12>
 226:	00 c0       	rjmp	.+0      	; 0x228 <initLcd+0x18>
	_delay_us(500);
	// Set 2 rows
	PORTD = 0b00111100;
 228:	8c e3       	ldi	r24, 0x3C	; 60
 22a:	8b b9       	out	0x0b, r24	; 11
	send_it();
 22c:	0e 94 c8 00 	call	0x190	; 0x190 <send_it>
	// Turn on screen
	PORTD = 0x0C;
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	8b b9       	out	0x0b, r24	; 11
	send_it();
 234:	0e 94 c8 00 	call	0x190	; 0x190 <send_it>
	//Clear screen
	clearLcd();
 238:	0e 94 02 01 	call	0x204	; 0x204 <clearLcd>
	set_cursorLcd(1,1);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <set_cursorLcd>
 248:	08 95       	ret

0000024a <main>:
#include <util/delay.h>
#define F_CPU 1000000UL


int main(void)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	63 97       	sbiw	r28, 0x13	; 19
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 262:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	83 ed       	ldi	r24, 0xD3	; 211
 266:	90 e3       	ldi	r25, 0x30	; 48
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x1e>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x24>
 26e:	00 00       	nop
	_delay_ms(50);
	initLcd();
 270:	0e 94 08 01 	call	0x210	; 0x210 <initLcd>
	char bacon[] = "Bacon is good";
 274:	8e e0       	ldi	r24, 0x0E	; 14
 276:	e0 e0       	ldi	r30, 0x00	; 0
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	de 01       	movw	r26, r28
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	8a 95       	dec	r24
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x34>
	char Ebba[] = "Ebba";
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	ee e0       	ldi	r30, 0x0E	; 14
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	de 01       	movw	r26, r28
 28e:	1f 96       	adiw	r26, 0x0f	; 15
 290:	01 90       	ld	r0, Z+
 292:	0d 92       	st	X+, r0
 294:	8a 95       	dec	r24
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x46>
	while (1)
	{
		set_cursorLcd(1,1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <set_cursorLcd>
		printLcd(bacon);
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printLcd>
		set_cursorLcd(2,1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <set_cursorLcd>
		printLcd(Ebba);
 2b8:	ce 01       	movw	r24, r28
 2ba:	0f 96       	adiw	r24, 0x0f	; 15
 2bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printLcd>
 2c0:	9f e3       	ldi	r25, 0x3F	; 63
 2c2:	22 e4       	ldi	r18, 0x42	; 66
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	91 50       	subi	r25, 0x01	; 1
 2c8:	20 40       	sbci	r18, 0x00	; 0
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x7c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x86>
 2d0:	00 00       	nop
		_delay_ms(5000);
		clearLcd();
 2d2:	0e 94 02 01 	call	0x204	; 0x204 <clearLcd>
		//control();
		if (isButtonNoPressed_C(5) == TRUE) {
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 62 00 	call	0xc4	; 0xc4 <isButtonNoPressed_C>
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	29 f4       	brne	.+10     	; 0x2ec <main+0xa2>
			turnOnNo_B(0);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 a6 00 	call	0x14c	; 0x14c <turnOnNo_B>
 2ea:	d6 cf       	rjmp	.-84     	; 0x298 <main+0x4e>
		}
		else {
			turnOffNo_B(0);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 b7 00 	call	0x16e	; 0x16e <turnOffNo_B>
 2f4:	d1 cf       	rjmp	.-94     	; 0x298 <main+0x4e>

000002f6 <__tablejump2__>:
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	05 90       	lpm	r0, Z+
 2fc:	f4 91       	lpm	r31, Z
 2fe:	e0 2d       	mov	r30, r0
 300:	09 94       	ijmp

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
